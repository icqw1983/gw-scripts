#!/bin/sh

IF=enp1s0f1
DEV=enp1s0f1i
DOWNLINK=200000 # in kbps
UPLINK=12000 # in kbps
TC=tc-adv
IP=ip
PACKET_SIZE=1514 # in bytes
BQL=$(( 10 * ${PACKET_SIZE} )) # in bytes
ECAKE_OPTS=""
ICAKE_OPTS="besteffort"

flush_qdisc() {
    $TC qdisc del dev ${IF} root 2> /dev/null
    $TC qdisc del dev ${IF} handle ffff: ingress 2> /dev/null
    $TC qdisc del dev ${DEV} root 2> /dev/null
    $IP link set dev ${DEV} down 2> /dev/null
    $IP link delete ${DEV} type ifb 2> /dev/null
}

eth_setup() {
    ethtool -K ${IF} gso on 2> /dev/null
    ethtool -K ${IF} tso on 2> /dev/null
    ethtool -K ${IF} ufo on 2> /dev/null
    ethtool -K ${IF} gro on 2> /dev/null

    if [ -e /sys/class/net/${IF}/queues/tx-0/byte_queue_limits ]
    then
        for i in /sys/class/net/${IF}/queues/tx-*/byte_queue_limits
        do
            echo ${BQL} > $i/limit_max
        done
    fi
}

egress_qdisc() {
    $TC qdisc del dev ${IF} root 2> /dev/null
    $TC qdisc add dev ${IF} root cake bandwidth ${UPLINK}kbit ${ECAKE_OPTS}
}

ingress_qdisc() {
    $TC qdisc del dev ${IF} handle ffff: ingress 2> /dev/null
    $TC qdisc add dev ${IF} handle ffff: ingress

    $IP link add name ${DEV} type ifb

    $TC qdisc del dev ${DEV} root 2> /dev/null
    $TC qdisc add dev ${DEV} root cake bandwidth ${DOWNLINK}kbit ${ICAKE_OPTS}

    $IP link set dev ${DEV} up

    $TC filter add dev ${IF} parent ffff: protocol all prio 1 u32 \
    match u32 0 0 action mirred egress redirect dev ${DEV}
}

tc_start() {
    flush_qdisc
    eth_setup
    egress_qdisc
    ingress_qdisc
}

tc_stop() {
    flush_qdisc
}

case "$1" in
start|restart|reload|force-reload)
    tc_start
    ;;
save)
    ;;
stop)
    echo "Automatic flushing disabled, use \"flush\" instead of \"stop\""
    ;;
flush)
    tc_stop
    ;;
*)
    echo "Usage: $0 {start|restart|reload|force-reload|save|flush}" >&2
    exit 1
    ;;
esac

exit 0
